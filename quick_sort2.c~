#include "sort.h"

/**
 * swap - swaps two integers
 * @a: first integer
 * @b: second integer
 * Return: void
 */
void swap(int *a, int *b)
{
int temp = *a;
*a = *b;
*b = temp;
}

/**
 * partition - performs the Lomuto partition
 * @arr: an arrays of integers
 * @low: the index of the first element of the partition
 * @high: the index of the last element in the partition
 * @size: array size.
 * Return: An integer representing the index where
 * the pivot element should be placed after sorting/
 */
int partition(int arr[], int low, int high, size_t size)
{
int pivot, i, j, swapped = 0;
pivot = arr[high];
i = (low - 1);
for (j = low; j < high; j++)
{
if (arr[j] < pivot)
{
i++;
swap(&arr[i], &arr[j]);
swapped = 1;
}
}
if (swapped == 1)
print_array(arr, size);
swap(&arr[i + 1], &arr[high]);
print_array(arr, size);
return (i + 1);
}

/**
 * quick_sort_recursive - implements the quick sort algorithm with the Lomuto
 * @arr: array of integers
 * @low: index of the first element of the partition
 * @high: the index of the last element of the partition
 * @size: the size of the array
 * Return: void
 */
void quick_sort_recursive(int arr[], int low, int high, size_t size)
{
int pi;
if (low < high)
{
pi = partition(arr, low, high, size);
quick_sort_recursive(arr, low, pi - 1, size);
quick_sort_recursive(arr, pi + 1, high, size);
}
}

/**
 * quick_sort - the actual quick sort function
 * @array: array to be sorted
 * @size: size of array
 * Return: void
 */
void quick_sort(int *array, size_t size)
{
if (size <= 1 || array == NULL)
return;
quick_sort_recursive(array, 0, size - 1, size);
}
